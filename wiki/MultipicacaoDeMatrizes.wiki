#summary One-sentence summary of this page.

= Objetivo =

Verificar o ganho de tempo do processamento paralelo nas SPEs do Cell em relação ao processamento apenas num PPE. Será realizada a multiplicação de duas matrizes 100000 vezes, para que mesmo usando matrizes pequenas, o ganho de tempo de execução possa ser observado.


= Códigos e Comentários =

Serão utilizadas matrizes 8x8, para que cada SPE seja responsável pelo resultado de uma linha da matriz final.

O código abaixo realiza a multiplicação de matrizes da forma convencional, apenas PPE, e mostra o tempo de execução.

{{{
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <math.h>
#define SPE_THREADS 8

typedef struct
{
    int vezes, n, p, num;
    float linmat1[SPE_THREADS];
    float mat2[SPE_THREADS][SPE_THREADS];
    float linresult[SPE_THREADS];
} __attribute__((aligned(128))) context;



int main(
{
    clock_t start, end;
    double elapsed;

    context ctxs[SPE_THREADS];
    int i, j, k, l, m, n, p, vezes=100000;

    scanf("%d %d %d", &m, &n, &p); //mat1(m x n) mat2(n x p) mat3(m x p)
    m = n = p = SPE_THREADS;

    //le mat1
    for(i=0; i<m; i++)
        for(j=0; j<n; j++)
            scanf("%f", &ctxs[i].linmat1[j]);

    //le mat2
    for(j=0; j<n; j++)
        for(k=0; k<p; k++)
            scanf("%f", &ctxs[0].mat2[j][k]);

    start = clock();
    //processamento
    for(l=0; l<vezes;l++)
    {
        for(i=0; i<m; i++)
            for(j=0; j<p; j++)
                ctxs[i].linresult[j]=0;

        for(i=0; i<m; i++)
            for(j=0; j<n; j++)
                for(k=0; k<p; k++)
                    ctxs[i].linresult[k] += ctxs[i].linmat1[j]*ctxs[0].mat2[j][k];
    }

    //imprime a matriz resultado
    for(i=0; i<m; i++, printf("\n"))
        for(j=0; j<p; j++)
            printf("%.2f ", ctxs[i].linresult[j]);

    //calcula e imprime o tempo de execução
    end = clock();
    elapsed = ((double) (end - start)) / CLOCKS_PER_SEC;
    printf("Tempo de execucao: %f\n",elapsed);

    return 0;
}
}}}

A estrutura
{{{
typedef struct
{
    int vezes, n, p, num;
    float linmat1[SPE_THREADS];
    float mat2[SPE_THREADS][SPE_THREADS];
    float linresult[SPE_THREADS];
} __attribute__((aligned(128))) context;
}}}
será utilizada tanto no processamento PPE quanto SPE, mas a variável _vezes_ e o comando _ __attribute__((aligned(128))) context_ serão usados apenas no SPE.

A seguir serão mostrados os programas PPE, que distribuirá o “trabalho” entre as SPEs, e SPE, que realiza o cálculo propriamente dito.
